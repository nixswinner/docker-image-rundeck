version: "2"

services:
  rundeck:
    image: eugenmayer/rundeck:3.3.7.20201208-1
    depends_on:
      - db
    environment:
      # see .env for explainations and docs
      DB_TYPE: ${DB_TYPE}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      EXTERNAL_SERVER_URL: ${EXTERNAL_SERVER_URL}
      RUNDECK_ADMIN_PASSWORD: ${RUNDECK_ADMIN_PASSWORD}
      RDECK_JVM_SETTINGS: ${RDECK_JVM_SETTINGS}
      RUNDECK_UID: ${RUNDECK_UID}
      RUNDECK_GID: ${RUNDECK_GID}
      RUNDECK_STORAGE_PROVIDER: ${RUNDECK_STORAGE_PROVIDER}
      RUNDECK_PROJECT_STORAGE_TYPE: ${RUNDECK_PROJECT_STORAGE_TYPE}
      LOGIN_MODULE: ${LOGIN_MODULE}
      JAAS_CONF_FILE: ${JAAS_CONF_FILE}
      RUNDECK_WITH_SSL: "${RUNDECK_WITH_SSL}"
      RD_USER: admin
      RD_PASSWORD: ${RUNDECK_ADMIN_PASSWORD}
      RD_URL: http://localhost:4440
      SERVER_URL: http://localhost:4440
      RD_BYPASS_URL: ${EXTERNAL_SERVER_URL}
    volumes:
      - rundeck_plugins:/opt/rundeck-plugins
      - rundeck_config:/etc/rundeck
      - rundeck_logs:/var/log/rundeck
      - rundeck_storage:/var/lib/rundeck/var/storage
      - rundeck_tmp:/var/rundeck
      # mount those for your own ssh keys
      # - .keys/id_rsa:/var/lib/rundeck/.ssh/id_rsa
      # - .keys/id_rsa.pub:/var/lib/rundeck/.ssh/id_rsa.pub
    labels:
      io.rancher.container.create_agent: 'true'
      io.rancher.container.agent.role: 'environment'
  # nginx is used to deal with the OPTIONS call not implemented in rundeck, nothing else
  rundecknginx:
    depends_on:
      - rundeck
    image: eugenmayer/rundeck_nginx
    labels:
      # that basically means, register a front in traffic, so if the host matches rundeck.lan, forward it to a traefik backend
      # called rundeck, which has the ip of this container, and forward to port 80 - so right to us in terms to our nginx
      # daemon
      - "traefik.backend=rundecknginx"
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:rundeck.lan"
      - "traefik.enable=true"
  # usually you will do your SSL interception with this
  traefik:
    depends_on:
      - rundecknginx
    restart: always
    image: traefik
    # --docker.exposedByDefault=false is used to forbid traefik to auto-register all container exposing ports in the Dockerfile
    # we only want to register the ones we set the traefik.enabled label on
    # we use --docker to be able to register by docker label, see rundecknginx
    # traefik is used so we mimic the production setup, where traefik does the SSL interception - in this setup
    # he has noting else to do to forward to nginx, and nginx does provide the fix for the OPTIONS call
    # which is not possible with traefik
    # we configure the entrypoint on 4080 since if we use curl from then inner container network using rundeck.lan:4080 the host
    # mapping 4080:80 would not be respected and would fail, thus we need to map 4080:4080
    # and thus we need to change the entrypoint
    command: -c /dev/null --api --docker --entrypoints="Name:http Address::80" --docker.exposedByDefault=false --docker.domain=docker.localhost --logLevel=DEBUG
    ports:
      - 80:80
      - 8080:8080 # thats the traefik admin backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  db:
    image: postgres:9.6
    volumes:
      - rundeck_db:/var/lib/postgresql
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
volumes:
  rundeck_config:
    driver: local
  rundeck_tmp:
    driver: local
  rundeck_storage:
    driver: local
  rundeck_logs:
    driver: local
  rundeck_plugins:
    driver: local
  rundeck_db:
    driver: local
